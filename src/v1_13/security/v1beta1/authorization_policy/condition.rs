use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Configuration for access control on workloads.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Condition : Condition specifies additional required attributes.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct Condition {
    /// The name of an Istio attribute. See the [full list of supported attributes](https://istio.io/docs/reference/config/security/conditions/).
    #[serde(rename = "key", skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Optional. A list of negative match of values for the attribute. Note: at least one of values or not_values must be set.
    #[serde(rename = "notValues", skip_serializing_if = "Option::is_none")]
    pub not_values: Option<Vec<String>>,
    /// Optional. A list of allowed values for the attribute. Note: at least one of values or not_values must be set.
    #[serde(rename = "values", skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

impl Condition {
    /// Condition specifies additional required attributes.
    pub fn new() -> Condition {
        Condition {
            key: None,
            not_values: None,
            values: None,
        }
    }
}