use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Configuration affecting Istio control plane installation version and shape.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// K8sIoApiCoreV1PhotonPersistentDiskVolumeSource : Represents a Photon Controller persistent disk resource.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct K8sIoApiCoreV1PhotonPersistentDiskVolumeSource {
    /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
    #[serde(rename = "fsType", skip_serializing_if = "Option::is_none")]
    pub fs_type: Option<String>,
    /// ID that identifies Photon Controller persistent disk
    #[serde(rename = "pdID", skip_serializing_if = "Option::is_none")]
    pub pd_id: Option<String>,
}

impl K8sIoApiCoreV1PhotonPersistentDiskVolumeSource {
    /// Represents a Photon Controller persistent disk resource.
    pub fn new() -> K8sIoApiCoreV1PhotonPersistentDiskVolumeSource {
        K8sIoApiCoreV1PhotonPersistentDiskVolumeSource {
            fs_type: None,
            pd_id: None,
        }
    }
}