use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Customizing Envoy configuration generated by Istio.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// EnvoyFilterRouteConfigurationMatchRouteMatchAction : Action refers to the route action taken by Envoy when a http route matches.

/// Action refers to the route action taken by Envoy when a http route matches.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, JsonSchema)]
pub enum EnvoyFilterRouteConfigurationMatchRouteMatchAction {
    #[serde(rename = "ANY")]
    ANY,
    #[serde(rename = "ROUTE")]
    ROUTE,
    #[serde(rename = "REDIRECT")]
    REDIRECT,
    #[serde(rename = "DIRECT_RESPONSE")]
    DIRECTRESPONSE,

}

impl ToString for EnvoyFilterRouteConfigurationMatchRouteMatchAction {
    fn to_string(&self) -> String {
        match self {
            Self::ANY => String::from("ANY"),
            Self::ROUTE => String::from("ROUTE"),
            Self::REDIRECT => String::from("REDIRECT"),
            Self::DIRECTRESPONSE => String::from("DIRECT_RESPONSE"),
        }
    }
}

impl Default for EnvoyFilterRouteConfigurationMatchRouteMatchAction {
    fn default() -> EnvoyFilterRouteConfigurationMatchRouteMatchAction {
        Self::ANY
    }
}