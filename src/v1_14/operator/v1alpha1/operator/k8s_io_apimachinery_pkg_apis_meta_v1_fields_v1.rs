use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Configuration affecting Istio control plane installation version and shape.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// K8sIoApimachineryPkgApisMetaV1FieldsV1 : FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct K8sIoApimachineryPkgApisMetaV1FieldsV1 {
    /// Raw is the underlying serialization of this object.
    #[serde(rename = "Raw", skip_serializing_if = "Option::is_none")]
    pub raw: Option<std::path::PathBuf>,
}

impl K8sIoApimachineryPkgApisMetaV1FieldsV1 {
    /// FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.
    pub fn new() -> K8sIoApimachineryPkgApisMetaV1FieldsV1 {
        K8sIoApimachineryPkgApisMetaV1FieldsV1 {
            raw: None,
        }
    }
}