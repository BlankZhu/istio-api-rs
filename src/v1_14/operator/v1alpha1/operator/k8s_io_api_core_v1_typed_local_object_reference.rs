use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Configuration affecting Istio control plane installation version and shape.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// K8sIoApiCoreV1TypedLocalObjectReference : TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace. +structType=atomic



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct K8sIoApiCoreV1TypedLocalObjectReference {
    /// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required. +optional
    #[serde(rename = "apiGroup", skip_serializing_if = "Option::is_none")]
    pub api_group: Option<String>,
    /// Kind is the type of resource being referenced
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name is the name of resource being referenced
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

impl K8sIoApiCoreV1TypedLocalObjectReference {
    /// TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace. +structType=atomic
    pub fn new() -> K8sIoApiCoreV1TypedLocalObjectReference {
        K8sIoApiCoreV1TypedLocalObjectReference {
            api_group: None,
            kind: None,
            name: None,
        }
    }
}