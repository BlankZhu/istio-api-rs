use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Telemetry configuration for workloads.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// AccessLoggingLogSelector : LogSelector provides a coarse-grained ability to configure logging behavior based on certain traffic metadata (such as traffic direction). LogSelector applies to traffic metadata which is not represented in the attribute set currently supported by Filters. It allows control planes to limit the configuration sent to individual workloads. Finer-grained logging behavior can be further configured via `filter`.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct AccessLoggingLogSelector {
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<super::WorkloadMode>,
}

impl AccessLoggingLogSelector {
    /// LogSelector provides a coarse-grained ability to configure logging behavior based on certain traffic metadata (such as traffic direction). LogSelector applies to traffic metadata which is not represented in the attribute set currently supported by Filters. It allows control planes to limit the configuration sent to individual workloads. Finer-grained logging behavior can be further configured via `filter`.
    pub fn new() -> AccessLoggingLogSelector {
        AccessLoggingLogSelector {
            mode: None,
        }
    }
}