use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Extend the functionality provided by the Istio proxy through WebAssembly filters.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 * Generated by: https://openapi-generator.tech
 */


/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, JsonSchema)]
pub enum EnvValueSource {
    #[serde(rename = "INLINE")]
    INLINE,
    #[serde(rename = "HOST")]
    HOST,

}

impl ToString for EnvValueSource {
    fn to_string(&self) -> String {
        match self {
            Self::INLINE => String::from("INLINE"),
            Self::HOST => String::from("HOST"),
        }
    }
}

impl Default for EnvValueSource {
    fn default() -> EnvValueSource {
        Self::INLINE
    }
}