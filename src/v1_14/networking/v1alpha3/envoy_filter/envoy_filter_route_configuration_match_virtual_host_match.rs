use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Customizing Envoy configuration generated by Istio.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// EnvoyFilterRouteConfigurationMatchVirtualHostMatch : Match a specific virtual host inside a route configuration.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct EnvoyFilterRouteConfigurationMatchVirtualHostMatch {
    /// The VirtualHosts objects generated by Istio are named as host:port, where the host typically corresponds to the VirtualService's host field or the hostname of a service in the registry.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "route", skip_serializing_if = "Option::is_none")]
    pub route: Option<Box<super::EnvoyFilterRouteConfigurationMatchRouteMatch>>,
}

impl EnvoyFilterRouteConfigurationMatchVirtualHostMatch {
    /// Match a specific virtual host inside a route configuration.
    pub fn new() -> EnvoyFilterRouteConfigurationMatchVirtualHostMatch {
        EnvoyFilterRouteConfigurationMatchVirtualHostMatch {
            name: None,
            route: None,
        }
    }
}