use serde::{Deserialize, Serialize};
use schemars::JsonSchema;
/*
 * Customizing Envoy configuration generated by Istio.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// EnvoyFilterListenerMatchFilterMatch : Conditions to match a specific filter within a filter chain.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct EnvoyFilterListenerMatchFilterMatch {
    /// The filter name to match on. For standard Envoy filters, [canonical filter](https://www.envoyproxy.io/docs/envoy/latest/version_history/v1.14.0#deprecated) names should be used.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "subFilter", skip_serializing_if = "Option::is_none")]
    pub sub_filter: Option<Box<super::EnvoyFilterListenerMatchSubFilterMatch>>,
}

impl EnvoyFilterListenerMatchFilterMatch {
    /// Conditions to match a specific filter within a filter chain.
    pub fn new() -> EnvoyFilterListenerMatchFilterMatch {
        EnvoyFilterListenerMatchFilterMatch {
            name: None,
            sub_filter: None,
        }
    }
}