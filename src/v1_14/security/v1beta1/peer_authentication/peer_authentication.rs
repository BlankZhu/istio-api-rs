use kube::CustomResource;
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Peer authentication configuration for workloads.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// PeerAuthenticationSpec : PeerAuthenticationSpec defines how traffic will be tunneled (or not) to the sidecar.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema, CustomResource)]
#[kube(group = "security.istio.io", version = "v1beta1", kind = "PeerAuthentication", namespaced)]
pub struct PeerAuthenticationSpec {
    #[serde(rename = "mtls", skip_serializing_if = "Option::is_none")]
    pub mtls: Option<Box<super::PeerAuthenticationMutualTls>>,
    /// Port specific mutual TLS settings. These only apply when a workload selector is specified.
    #[serde(rename = "portLevelMtls", skip_serializing_if = "Option::is_none")]
    pub port_level_mtls: Option<::std::collections::HashMap<String, super::PeerAuthenticationMutualTls>>,
    #[serde(rename = "selector", skip_serializing_if = "Option::is_none")]
    pub selector: Option<Box<crate::r#type::v1beta1::selector::workload_selector::WorkloadSelector>>,
}

impl PeerAuthenticationSpec {
    /// PeerAuthenticationSpec defines how traffic will be tunneled (or not) to the sidecar.
    pub fn new() -> PeerAuthenticationSpec {
        PeerAuthenticationSpec {
            mtls: None,
            port_level_mtls: None,
            selector: None,
        }
    }
}