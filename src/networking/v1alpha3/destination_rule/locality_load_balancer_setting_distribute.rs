use serde::{Deserialize, Serialize};
use schemars::JsonSchema;
/*
 * Configuration affecting load balancing, outlier detection, etc.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// LocalityLoadBalancerSettingDistribute : Describes how traffic originating in the 'from' zone or sub-zone is distributed over a set of 'to' zones. Syntax for specifying a zone is {region}/{zone}/{sub-zone} and terminal wildcards are allowed on any segment of the specification. Examples: `*` - matches all localities



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct LocalityLoadBalancerSettingDistribute {
    /// Originating locality, '/' separated, e.g. 'region/zone/sub_zone'.
    #[serde(rename = "from", skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    /// Map of upstream localities to traffic distribution weights. The sum of all weights should be 100. Any locality not present will receive no traffic.
    #[serde(rename = "to", skip_serializing_if = "Option::is_none")]
    pub to: Option<::std::collections::HashMap<String, i32>>,
}

impl LocalityLoadBalancerSettingDistribute {
    /// Describes how traffic originating in the 'from' zone or sub-zone is distributed over a set of 'to' zones. Syntax for specifying a zone is {region}/{zone}/{sub-zone} and terminal wildcards are allowed on any segment of the specification. Examples: `*` - matches all localities
    pub fn new() -> LocalityLoadBalancerSettingDistribute {
        LocalityLoadBalancerSettingDistribute {
            from: None,
            to: None,
        }
    }
}