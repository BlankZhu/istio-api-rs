use serde::{Deserialize, Serialize};
use schemars::JsonSchema;
/*
 * Configuration affecting service registry.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ServiceEntryLocation : Location specifies whether the service is part of Istio mesh or outside the mesh. Location determines the behavior of several features, such as service-to-service mTLS authentication, policy enforcement, etc. When communicating with services outside the mesh, Istio's mTLS authentication is disabled, and policy enforcement is performed on the client-side as opposed to server-side.

/// Location specifies whether the service is part of Istio mesh or outside the mesh. Location determines the behavior of several features, such as service-to-service mTLS authentication, policy enforcement, etc. When communicating with services outside the mesh, Istio's mTLS authentication is disabled, and policy enforcement is performed on the client-side as opposed to server-side.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, JsonSchema)]
pub enum ServiceEntryLocation {
    #[serde(rename = "MESH_EXTERNAL")]
    EXTERNAL,
    #[serde(rename = "MESH_INTERNAL")]
    INTERNAL,

}

impl ToString for ServiceEntryLocation {
    fn to_string(&self) -> String {
        match self {
            Self::EXTERNAL => String::from("MESH_EXTERNAL"),
            Self::INTERNAL => String::from("MESH_INTERNAL"),
        }
    }
}

impl Default for ServiceEntryLocation {
    fn default() -> ServiceEntryLocation {
        Self::EXTERNAL
    }
}