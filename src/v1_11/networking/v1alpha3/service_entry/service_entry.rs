use serde::{Deserialize, Serialize};
use schemars::JsonSchema;
use kube::CustomResource;
/*
 * Configuration affecting service registry.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ServiceEntrySpec : ServiceEntry enables adding additional entries into Istio's internal service registry.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema, CustomResource)]
#[kube(group = "networking.istio.io", version = "v1alpha3", kind = "ServiceEntry", namespaced)]
pub struct ServiceEntrySpec {
    /// The hosts associated with the ServiceEntry. Could be a DNS name with wildcard prefix.
    #[serde(rename = "hosts", skip_serializing_if = "Option::is_none")]
    pub hosts: Option<Vec<String>>,
    /// The virtual IP addresses associated with the service. Could be CIDR prefix. For HTTP traffic, generated route configurations will include http route domains for both the `addresses` and `hosts` field values and the destination will be identified based on the HTTP Host/Authority header. If one or more IP addresses are specified, the incoming traffic will be identified as belonging to this service if the destination IP matches the IP/CIDRs specified in the addresses field. If the Addresses field is empty, traffic will be identified solely based on the destination port. In such scenarios, the port on which the service is being accessed must not be shared by any other service in the mesh. In other words, the sidecar will behave as a simple TCP proxy, forwarding incoming traffic on a specified port to the specified destination endpoint IP/host. Unix domain socket addresses are not supported in this field.
    #[serde(rename = "addresses", skip_serializing_if = "Option::is_none")]
    pub addresses: Option<Vec<String>>,
    /// The ports associated with the external service. If the Endpoints are Unix domain socket addresses, there must be exactly one port.
    #[serde(rename = "ports", skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<super::Port>>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<super::ServiceEntryLocation>,
    #[serde(rename = "resolution", skip_serializing_if = "Option::is_none")]
    pub resolution: Option<super::ServiceEntryResolution>,
    /// One or more endpoints associated with the service. Only one of `endpoints` or `workloadSelector` can be specified.
    #[serde(rename = "endpoints", skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<super::WorkloadEntry>>,
    #[serde(rename = "workloadSelector", skip_serializing_if = "Option::is_none")]
    pub workload_selector: Option<Box<super::WorkloadSelector>>,
    /// A list of namespaces to which this service is exported. Exporting a service allows it to be used by sidecars, gateways and virtual services defined in other namespaces. This feature provides a mechanism for service owners and mesh administrators to control the visibility of services across namespace boundaries.
    #[serde(rename = "exportTo", skip_serializing_if = "Option::is_none")]
    pub export_to: Option<Vec<String>>,
    /// If specified, the proxy will verify that the server certificate's subject alternate name matches one of the specified values.
    #[serde(rename = "subjectAltNames", skip_serializing_if = "Option::is_none")]
    pub subject_alt_names: Option<Vec<String>>,
}

impl ServiceEntrySpec {
    /// ServiceEntry enables adding additional entries into Istio's internal service registry.
    pub fn new() -> ServiceEntrySpec {
        ServiceEntrySpec {
            hosts: None,
            addresses: None,
            ports: None,
            location: None,
            resolution: None,
            endpoints: None,
            workload_selector: None,
            export_to: None,
            subject_alt_names: None,
        }
    }
}