use serde::{Deserialize, Serialize};
use schemars::JsonSchema;
/*
 * Customizing Envoy configuration generated by Istio.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// EnvoyFilterClusterMatch : Conditions specified in `ClusterMatch` must be met for the patch to be applied to a cluster.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct EnvoyFilterClusterMatch {
    /// The service port for which this cluster was generated. If omitted, applies to clusters for any port. **Note:** for inbound cluster, it is the service target port.
    #[serde(rename = "portNumber", skip_serializing_if = "Option::is_none")]
    pub port_number: Option<i32>,
    /// The fully qualified service name for this cluster. If omitted, applies to clusters for any service. For services defined through service entries, the service name is same as the hosts defined in the service entry. **Note:** for inbound cluster, this is ignored.
    #[serde(rename = "service", skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
    /// The subset associated with the service. If omitted, applies to clusters for any subset of a service.
    #[serde(rename = "subset", skip_serializing_if = "Option::is_none")]
    pub subset: Option<String>,
    /// The exact name of the cluster to match. To match a specific cluster by name, such as the internally generated `Passthrough` cluster, leave all fields in clusterMatch empty, except the name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

impl EnvoyFilterClusterMatch {
    /// Conditions specified in `ClusterMatch` must be met for the patch to be applied to a cluster.
    pub fn new() -> EnvoyFilterClusterMatch {
        EnvoyFilterClusterMatch {
            port_number: None,
            service: None,
            subset: None,
            name: None,
        }
    }
}