use serde::{Deserialize, Serialize};
use schemars::JsonSchema;
/*
 * Customizing Envoy configuration generated by Istio.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// EnvoyFilterRouteConfigurationMatchRouteMatch : Match a specific route inside a virtual host in a route configuration.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct EnvoyFilterRouteConfigurationMatchRouteMatch {
    /// The Route objects generated by default are named as default. Route objects generated using a virtual service will carry the name used in the virtual service's HTTP routes.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<super::EnvoyFilterRouteConfigurationMatchRouteMatchAction>,
}

impl EnvoyFilterRouteConfigurationMatchRouteMatch {
    /// Match a specific route inside a virtual host in a route configuration.
    pub fn new() -> EnvoyFilterRouteConfigurationMatchRouteMatch {
        EnvoyFilterRouteConfigurationMatchRouteMatch {
            name: None,
            action: None,
        }
    }
}