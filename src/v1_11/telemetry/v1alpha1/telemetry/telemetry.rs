use kube::CustomResource;
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// TelemetrySpec : TelemetrySpec defines how the telemetry is generated for workloads within a mesh.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema, CustomResource)]
#[kube(group = "telemetry.istio.io", version = "v1alpha1", kind = "Telemetry", namespaced)]
pub struct TelemetrySpec {
    /// Optional. AccessLogging configures the access logging behavior for all selected workloads.
    #[serde(rename = "accessLogging", skip_serializing_if = "Option::is_none")]
    pub access_logging: Option<Vec<super::AccessLogging>>,
    /// Optional. Metrics configure the metrics behavior for all selected workloads.
    #[serde(rename = "metrics", skip_serializing_if = "Option::is_none")]
    pub metrics: Option<Vec<super::Metrics>>,
    #[serde(rename = "selector", skip_serializing_if = "Option::is_none")]
    pub selector: Option<Box<crate::r#type::v1beta1::selector::workload_selector::WorkloadSelector>>,
    /// Optional. Tracing configures the tracing behavior for all selected workloads.
    #[serde(rename = "tracing", skip_serializing_if = "Option::is_none")]
    pub tracing: Option<Vec<super::Tracing>>,
}

impl TelemetrySpec {
    /// TelemetrySpec defines how the telemetry is generated for workloads within a mesh.
    pub fn new() -> TelemetrySpec {
        TelemetrySpec {
            access_logging: None,
            metrics: None,
            selector: None,
            tracing: None,
        }
    }
}