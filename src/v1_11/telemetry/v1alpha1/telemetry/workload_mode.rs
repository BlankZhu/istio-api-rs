use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// WorkloadMode : WorkloadMode allows selection of the role of the underlying workload in network traffic. A workload is considered as acting as a SERVER if it is the destination of the traffic (that is, traffic direction, from the perspective of the workload is *inbound*). If the workload is the source of the network traffic, it is considered to be in CLIENT mode (traffic is *outbound* from the workload).

/// WorkloadMode allows selection of the role of the underlying workload in network traffic. A workload is considered as acting as a SERVER if it is the destination of the traffic (that is, traffic direction, from the perspective of the workload is *inbound*). If the workload is the source of the network traffic, it is considered to be in CLIENT mode (traffic is *outbound* from the workload).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize, JsonSchema)]
pub enum WorkloadMode {
    #[serde(rename = "CLIENT_AND_SERVER")]
    CLIENTANDSERVER,
    #[serde(rename = "CLIENT")]
    CLIENT,
    #[serde(rename = "SERVER")]
    SERVER,

}

impl ToString for WorkloadMode {
    fn to_string(&self) -> String {
        match self {
            Self::CLIENTANDSERVER => String::from("CLIENT_AND_SERVER"),
            Self::CLIENT => String::from("CLIENT"),
            Self::SERVER => String::from("SERVER"),
        }
    }
}

impl Default for WorkloadMode {
    fn default() -> WorkloadMode {
        Self::CLIENTANDSERVER
    }
}