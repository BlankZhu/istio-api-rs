use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Configuration affecting Istio control plane installation version and shape.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// K8sIoApiCoreV1IscsiVolumeSource : Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct K8sIoApiCoreV1IscsiVolumeSource {
    /// whether support iSCSI Discovery CHAP authentication +optional
    #[serde(rename = "chapAuthDiscovery", skip_serializing_if = "Option::is_none")]
    pub chap_auth_discovery: Option<bool>,
    /// whether support iSCSI Session CHAP authentication +optional
    #[serde(rename = "chapAuthSession", skip_serializing_if = "Option::is_none")]
    pub chap_auth_session: Option<bool>,
    /// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine +optional
    #[serde(rename = "fsType", skip_serializing_if = "Option::is_none")]
    pub fs_type: Option<String>,
    /// Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection. +optional
    #[serde(rename = "initiatorName", skip_serializing_if = "Option::is_none")]
    pub initiator_name: Option<String>,
    /// Target iSCSI Qualified Name.
    #[serde(rename = "iqn", skip_serializing_if = "Option::is_none")]
    pub iqn: Option<String>,
    /// iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp). +optional
    #[serde(rename = "iscsiInterface", skip_serializing_if = "Option::is_none")]
    pub iscsi_interface: Option<String>,
    /// iSCSI Target Lun number.
    #[serde(rename = "lun", skip_serializing_if = "Option::is_none")]
    pub lun: Option<i32>,
    /// iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260). +optional
    #[serde(rename = "portals", skip_serializing_if = "Option::is_none")]
    pub portals: Option<Vec<String>>,
    /// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. +optional
    #[serde(rename = "readOnly", skip_serializing_if = "Option::is_none")]
    pub read_only: Option<bool>,
    #[serde(rename = "secretRef", skip_serializing_if = "Option::is_none")]
    pub secret_ref: Option<Box<super::K8sIoApiCoreV1LocalObjectReference>>,
    /// iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
    #[serde(rename = "targetPortal", skip_serializing_if = "Option::is_none")]
    pub target_portal: Option<String>,
}

impl K8sIoApiCoreV1IscsiVolumeSource {
    /// Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
    pub fn new() -> K8sIoApiCoreV1IscsiVolumeSource {
        K8sIoApiCoreV1IscsiVolumeSource {
            chap_auth_discovery: None,
            chap_auth_session: None,
            fs_type: None,
            initiator_name: None,
            iqn: None,
            iscsi_interface: None,
            lun: None,
            portals: None,
            read_only: None,
            secret_ref: None,
            target_portal: None,
        }
    }
}