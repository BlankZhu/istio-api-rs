use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Configuration affecting Istio control plane installation version and shape.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// K8sIoApiCoreV1AzureDiskVolumeSource : AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct K8sIoApiCoreV1AzureDiskVolumeSource {
    /// Host Caching mode: None, Read Only, Read Write. +optional
    #[serde(rename = "cachingMode", skip_serializing_if = "Option::is_none")]
    pub caching_mode: Option<String>,
    /// The Name of the data disk in the blob storage
    #[serde(rename = "diskName", skip_serializing_if = "Option::is_none")]
    pub disk_name: Option<String>,
    /// The URI the data disk in the blob storage
    #[serde(rename = "diskURI", skip_serializing_if = "Option::is_none")]
    pub disk_uri: Option<String>,
    /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. +optional
    #[serde(rename = "fsType", skip_serializing_if = "Option::is_none")]
    pub fs_type: Option<String>,
    /// Expected values Shared: multiple blob disks per storage account Dedicated: single blob disk per storage account Managed: azure managed data disk (only in managed availability set). defaults to shared
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. +optional
    #[serde(rename = "readOnly", skip_serializing_if = "Option::is_none")]
    pub read_only: Option<bool>,
}

impl K8sIoApiCoreV1AzureDiskVolumeSource {
    /// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    pub fn new() -> K8sIoApiCoreV1AzureDiskVolumeSource {
        K8sIoApiCoreV1AzureDiskVolumeSource {
            caching_mode: None,
            disk_name: None,
            disk_uri: None,
            fs_type: None,
            kind: None,
            read_only: None,
        }
    }
}