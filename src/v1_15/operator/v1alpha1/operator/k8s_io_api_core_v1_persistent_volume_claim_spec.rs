use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Configuration affecting Istio control plane installation version and shape.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// K8sIoApiCoreV1PersistentVolumeClaimSpec : PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct K8sIoApiCoreV1PersistentVolumeClaimSpec {
    /// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1 +optional
    #[serde(rename = "accessModes", skip_serializing_if = "Option::is_none")]
    pub access_modes: Option<Vec<String>>,
    #[serde(rename = "dataSource", skip_serializing_if = "Option::is_none")]
    pub data_source: Option<Box<super::K8sIoApiCoreV1TypedLocalObjectReference>>,
    #[serde(rename = "dataSourceRef", skip_serializing_if = "Option::is_none")]
    pub data_source_ref: Option<Box<super::K8sIoApiCoreV1TypedLocalObjectReference>>,
    #[serde(rename = "resources", skip_serializing_if = "Option::is_none")]
    pub resources: Option<Box<super::K8sIoApiCoreV1ResourceRequirements>>,
    #[serde(rename = "selector", skip_serializing_if = "Option::is_none")]
    pub selector: Option<Box<super::K8sIoApimachineryPkgApisMetaV1LabelSelector>>,
    /// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1 +optional
    #[serde(rename = "storageClassName", skip_serializing_if = "Option::is_none")]
    pub storage_class_name: Option<String>,
    /// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. +optional
    #[serde(rename = "volumeMode", skip_serializing_if = "Option::is_none")]
    pub volume_mode: Option<String>,
    /// volumeName is the binding reference to the PersistentVolume backing this claim. +optional
    #[serde(rename = "volumeName", skip_serializing_if = "Option::is_none")]
    pub volume_name: Option<String>,
}

impl K8sIoApiCoreV1PersistentVolumeClaimSpec {
    /// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
    pub fn new() -> K8sIoApiCoreV1PersistentVolumeClaimSpec {
        K8sIoApiCoreV1PersistentVolumeClaimSpec {
            access_modes: None,
            data_source: None,
            data_source_ref: None,
            resources: None,
            selector: None,
            storage_class_name: None,
            volume_mode: None,
            volume_name: None,
        }
    }
}