use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Configuration affecting Istio control plane installation version and shape.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// K8sIoApimachineryPkgApisMetaV1LabelSelectorRequirement : A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct K8sIoApimachineryPkgApisMetaV1LabelSelectorRequirement {
    /// key is the label key that the selector applies to. +patchMergeKey=key +patchStrategy=merge
    #[serde(rename = "key", skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
    #[serde(rename = "operator", skip_serializing_if = "Option::is_none")]
    pub operator: Option<String>,
    /// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. +optional
    #[serde(rename = "values", skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

impl K8sIoApimachineryPkgApisMetaV1LabelSelectorRequirement {
    /// A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    pub fn new() -> K8sIoApimachineryPkgApisMetaV1LabelSelectorRequirement {
        K8sIoApimachineryPkgApisMetaV1LabelSelectorRequirement {
            key: None,
            operator: None,
            values: None,
        }
    }
}