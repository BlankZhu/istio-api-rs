use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Configuration affecting Istio control plane installation version and shape.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// K8sIoApiCoreV1CsiVolumeSource : Represents a source location of a volume to mount, managed by an external CSI driver



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct K8sIoApiCoreV1CsiVolumeSource {
    /// driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
    #[serde(rename = "driver", skip_serializing_if = "Option::is_none")]
    pub driver: Option<String>,
    /// fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply. +optional
    #[serde(rename = "fsType", skip_serializing_if = "Option::is_none")]
    pub fs_type: Option<String>,
    #[serde(rename = "nodePublishSecretRef", skip_serializing_if = "Option::is_none")]
    pub node_publish_secret_ref: Option<Box<super::K8sIoApiCoreV1LocalObjectReference>>,
    /// readOnly specifies a read-only configuration for the volume. Defaults to false (read/write). +optional
    #[serde(rename = "readOnly", skip_serializing_if = "Option::is_none")]
    pub read_only: Option<bool>,
    /// volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values. +optional
    #[serde(rename = "volumeAttributes", skip_serializing_if = "Option::is_none")]
    pub volume_attributes: Option<::std::collections::HashMap<String, String>>,
}

impl K8sIoApiCoreV1CsiVolumeSource {
    /// Represents a source location of a volume to mount, managed by an external CSI driver
    pub fn new() -> K8sIoApiCoreV1CsiVolumeSource {
        K8sIoApiCoreV1CsiVolumeSource {
            driver: None,
            fs_type: None,
            node_publish_secret_ref: None,
            read_only: None,
            volume_attributes: None,
        }
    }
}