use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Configuration affecting Istio control plane installation version and shape.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// K8sIoApimachineryPkgApisMetaV1OwnerReference : OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field. +structType=atomic



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct K8sIoApimachineryPkgApisMetaV1OwnerReference {
    /// API version of the referent.
    #[serde(rename = "apiVersion", skip_serializing_if = "Option::is_none")]
    pub api_version: Option<String>,
    /// If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned. +optional
    #[serde(rename = "blockOwnerDeletion", skip_serializing_if = "Option::is_none")]
    pub block_owner_deletion: Option<bool>,
    /// If true, this reference points to the managing controller. +optional
    #[serde(rename = "controller", skip_serializing_if = "Option::is_none")]
    pub controller: Option<bool>,
    /// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    #[serde(rename = "uid", skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

impl K8sIoApimachineryPkgApisMetaV1OwnerReference {
    /// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field. +structType=atomic
    pub fn new() -> K8sIoApimachineryPkgApisMetaV1OwnerReference {
        K8sIoApimachineryPkgApisMetaV1OwnerReference {
            api_version: None,
            block_owner_deletion: None,
            controller: None,
            kind: None,
            name: None,
            uid: None,
        }
    }
}