use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Configuration affecting Istio control plane installation version and shape.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// K8sIoApiCoreV1VsphereVirtualDiskVolumeSource : Represents a vSphere volume resource.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct K8sIoApiCoreV1VsphereVirtualDiskVolumeSource {
    /// fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. +optional
    #[serde(rename = "fsType", skip_serializing_if = "Option::is_none")]
    pub fs_type: Option<String>,
    /// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName. +optional
    #[serde(rename = "storagePolicyID", skip_serializing_if = "Option::is_none")]
    pub storage_policy_id: Option<String>,
    /// storagePolicyName is the storage Policy Based Management (SPBM) profile name. +optional
    #[serde(rename = "storagePolicyName", skip_serializing_if = "Option::is_none")]
    pub storage_policy_name: Option<String>,
    /// volumePath is the path that identifies vSphere volume vmdk
    #[serde(rename = "volumePath", skip_serializing_if = "Option::is_none")]
    pub volume_path: Option<String>,
}

impl K8sIoApiCoreV1VsphereVirtualDiskVolumeSource {
    /// Represents a vSphere volume resource.
    pub fn new() -> K8sIoApiCoreV1VsphereVirtualDiskVolumeSource {
        K8sIoApiCoreV1VsphereVirtualDiskVolumeSource {
            fs_type: None,
            storage_policy_id: None,
            storage_policy_name: None,
            volume_path: None,
        }
    }
}