use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Customizing Envoy configuration generated by Istio.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// EnvoyFilterPatch : Patch specifies how the selected object should be modified.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct EnvoyFilterPatch {
    #[serde(rename = "filterClass", skip_serializing_if = "Option::is_none")]
    pub filter_class: Option<super::EnvoyFilterPatchFilterClass>,
    #[serde(rename = "operation", skip_serializing_if = "Option::is_none")]
    pub operation: Option<super::EnvoyFilterPatchOperation>,
    /// The JSON config of the object being patched. This will be merged using proto merge semantics with the existing proto in the path.
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<serde_json::Value>,
}

impl EnvoyFilterPatch {
    /// Patch specifies how the selected object should be modified.
    pub fn new() -> EnvoyFilterPatch {
        EnvoyFilterPatch {
            filter_class: None,
            operation: None,
            value: None,
        }
    }
}