use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Customizing Envoy configuration generated by Istio.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// EnvoyFilterEnvoyConfigObjectPatch : Changes to be made to various envoy config objects.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct EnvoyFilterEnvoyConfigObjectPatch {
    #[serde(rename = "applyTo", skip_serializing_if = "Option::is_none")]
    pub apply_to: Option<super::EnvoyFilterApplyTo>,
    #[serde(rename = "match", skip_serializing_if = "Option::is_none")]
    pub _match: Option<Box<super::EnvoyFilterEnvoyConfigObjectMatch>>,
    #[serde(rename = "patch", skip_serializing_if = "Option::is_none")]
    pub patch: Option<Box<super::EnvoyFilterPatch>>,
}

impl EnvoyFilterEnvoyConfigObjectPatch {
    /// Changes to be made to various envoy config objects.
    pub fn new() -> EnvoyFilterEnvoyConfigObjectPatch {
        EnvoyFilterEnvoyConfigObjectPatch {
            apply_to: None,
            _match: None,
            patch: None,
        }
    }
}