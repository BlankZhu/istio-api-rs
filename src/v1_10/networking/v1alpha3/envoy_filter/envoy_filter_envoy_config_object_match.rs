use serde::{Deserialize, Serialize};
use schemars::JsonSchema;
/*
 * Customizing Envoy configuration generated by Istio.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// EnvoyFilterEnvoyConfigObjectMatch : One or more match conditions to be met before a patch is applied to the generated configuration for a given proxy.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct EnvoyFilterEnvoyConfigObjectMatch {
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<super::EnvoyFilterPatchContext>,
    #[serde(rename = "proxy", skip_serializing_if = "Option::is_none")]
    pub proxy: Option<Box<super::EnvoyFilterProxyMatch>>,
    #[serde(rename = "listener")]
    pub listener: Box<super::EnvoyFilterListenerMatch>,
    #[serde(rename = "routeConfiguration")]
    pub route_configuration: Box<super::EnvoyFilterRouteConfigurationMatch>,
    #[serde(rename = "cluster")]
    pub cluster: Box<super::EnvoyFilterClusterMatch>,
}

impl EnvoyFilterEnvoyConfigObjectMatch {
    /// One or more match conditions to be met before a patch is applied to the generated configuration for a given proxy.
    pub fn new(listener: super::EnvoyFilterListenerMatch, route_configuration: super::EnvoyFilterRouteConfigurationMatch, cluster: super::EnvoyFilterClusterMatch) -> EnvoyFilterEnvoyConfigObjectMatch {
        EnvoyFilterEnvoyConfigObjectMatch {
            context: None,
            proxy: None,
            listener: Box::new(listener),
            route_configuration: Box::new(route_configuration),
            cluster: Box::new(cluster),
        }
    }
}