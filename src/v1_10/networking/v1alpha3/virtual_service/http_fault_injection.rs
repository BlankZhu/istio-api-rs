use serde::{Deserialize, Serialize};
use schemars::JsonSchema;
/*
 * Configuration affecting label/content routing, sni routing, etc.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// HttpFaultInjection : HTTPFaultInjection can be used to specify one or more faults to inject while forwarding HTTP requests to the destination specified in a route. Fault specification is part of a VirtualService rule. Faults include aborting the Http request from downstream service, and/or delaying proxying of requests. A fault rule MUST HAVE delay or abort or both.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct HttpFaultInjection {
    #[serde(rename = "delay", skip_serializing_if = "Option::is_none")]
    pub delay: Option<Box<super::HttpFaultInjectionDelay>>,
    #[serde(rename = "abort", skip_serializing_if = "Option::is_none")]
    pub abort: Option<Box<super::HttpFaultInjectionAbort>>,
}

impl HttpFaultInjection {
    /// HTTPFaultInjection can be used to specify one or more faults to inject while forwarding HTTP requests to the destination specified in a route. Fault specification is part of a VirtualService rule. Faults include aborting the Http request from downstream service, and/or delaying proxying of requests. A fault rule MUST HAVE delay or abort or both.
    pub fn new() -> HttpFaultInjection {
        HttpFaultInjection {
            delay: None,
            abort: None,
        }
    }
}