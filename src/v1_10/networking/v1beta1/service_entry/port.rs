use serde::{Deserialize, Serialize};
use schemars::JsonSchema;
/*
 * Configuration affecting service registry.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Port : Port describes the properties of a specific port of a service.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct Port {
    /// A valid non-negative integer port number.
    #[serde(rename = "number", skip_serializing_if = "Option::is_none")]
    pub number: Option<i32>,
    /// Label assigned to the port.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The protocol exposed on the port. MUST BE one of HTTP|HTTPS|GRPC|HTTP2|MONGO|TCP|TLS. TLS implies the connection will be routed based on the SNI header to the destination without terminating the TLS connection.
    #[serde(rename = "protocol", skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// The port number on the endpoint where the traffic will be received. Applicable only when used with ServiceEntries.
    #[serde(rename = "targetPort", skip_serializing_if = "Option::is_none")]
    pub target_port: Option<i32>,
}

impl Port {
    /// Port describes the properties of a specific port of a service.
    pub fn new() -> Port {
        Port {
            number: None,
            name: None,
            protocol: None,
            target_port: None,
        }
    }
}