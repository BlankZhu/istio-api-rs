use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Configuration affecting label/content routing, sni routing, etc.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// L4MatchAttributes : L4 connection match attributes. Note that L4 connection matching support is incomplete.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct L4MatchAttributes {
    /// IPv4 or IPv6 ip addresses of destination with optional subnet. E.g., a.b.c.d/xx form or just a.b.c.d.
    #[serde(rename = "destinationSubnets", skip_serializing_if = "Option::is_none")]
    pub destination_subnets: Option<Vec<String>>,
    /// Names of gateways where the rule should be applied. Gateway names in the top-level `gateways` field of the VirtualService (if any) are overridden. The gateway match is independent of sourceLabels.
    #[serde(rename = "gateways", skip_serializing_if = "Option::is_none")]
    pub gateways: Option<Vec<String>>,
    /// Specifies the port on the host that is being addressed. Many services only expose a single port or label ports with the protocols they support, in these cases it is not required to explicitly select the port.
    #[serde(rename = "port", skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// One or more labels that constrain the applicability of a rule to workloads with the given labels. If the VirtualService has a list of gateways specified in the top-level `gateways` field, it should include the reserved gateway `mesh` in order for this field to be applicable.
    #[serde(rename = "sourceLabels", skip_serializing_if = "Option::is_none")]
    pub source_labels: Option<::std::collections::HashMap<String, String>>,
    /// Source namespace constraining the applicability of a rule to workloads in that namespace. If the VirtualService has a list of gateways specified in the top-level `gateways` field, it must include the reserved gateway `mesh` for this field to be applicable.
    #[serde(rename = "sourceNamespace", skip_serializing_if = "Option::is_none")]
    pub source_namespace: Option<String>,
    /// IPv4 or IPv6 ip address of source with optional subnet. E.g., a.b.c.d/xx form or just a.b.c.d $hide_from_docs
    #[serde(rename = "sourceSubnet", skip_serializing_if = "Option::is_none")]
    pub source_subnet: Option<String>,
}

impl L4MatchAttributes {
    /// L4 connection match attributes. Note that L4 connection matching support is incomplete.
    pub fn new() -> L4MatchAttributes {
        L4MatchAttributes {
            destination_subnets: None,
            gateways: None,
            port: None,
            source_labels: None,
            source_namespace: None,
            source_subnet: None,
        }
    }
}