use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Configuration affecting Istio control plane installation version and shape.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// K8sIoApiCoreV1ScaleIoVolumeSource : ScaleIOVolumeSource represents a persistent ScaleIO volume



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct K8sIoApiCoreV1ScaleIoVolumeSource {
    /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\". +optional
    #[serde(rename = "fsType", skip_serializing_if = "Option::is_none")]
    pub fs_type: Option<String>,
    /// The host address of the ScaleIO API Gateway.
    #[serde(rename = "gateway", skip_serializing_if = "Option::is_none")]
    pub gateway: Option<String>,
    /// The name of the ScaleIO Protection Domain for the configured storage. +optional
    #[serde(rename = "protectionDomain", skip_serializing_if = "Option::is_none")]
    pub protection_domain: Option<String>,
    /// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. +optional
    #[serde(rename = "readOnly", skip_serializing_if = "Option::is_none")]
    pub read_only: Option<bool>,
    #[serde(rename = "secretRef", skip_serializing_if = "Option::is_none")]
    pub secret_ref: Option<Box<super::K8sIoApiCoreV1LocalObjectReference>>,
    /// Flag to enable/disable SSL communication with Gateway, default false +optional
    #[serde(rename = "sslEnabled", skip_serializing_if = "Option::is_none")]
    pub ssl_enabled: Option<bool>,
    /// Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned. +optional
    #[serde(rename = "storageMode", skip_serializing_if = "Option::is_none")]
    pub storage_mode: Option<String>,
    /// The ScaleIO Storage Pool associated with the protection domain. +optional
    #[serde(rename = "storagePool", skip_serializing_if = "Option::is_none")]
    pub storage_pool: Option<String>,
    /// The name of the storage system as configured in ScaleIO.
    #[serde(rename = "system", skip_serializing_if = "Option::is_none")]
    pub system: Option<String>,
    /// The name of a volume already created in the ScaleIO system that is associated with this volume source.
    #[serde(rename = "volumeName", skip_serializing_if = "Option::is_none")]
    pub volume_name: Option<String>,
}

impl K8sIoApiCoreV1ScaleIoVolumeSource {
    /// ScaleIOVolumeSource represents a persistent ScaleIO volume
    pub fn new() -> K8sIoApiCoreV1ScaleIoVolumeSource {
        K8sIoApiCoreV1ScaleIoVolumeSource {
            fs_type: None,
            gateway: None,
            protection_domain: None,
            read_only: None,
            secret_ref: None,
            ssl_enabled: None,
            storage_mode: None,
            storage_pool: None,
            system: None,
            volume_name: None,
        }
    }
}