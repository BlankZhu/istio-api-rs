use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Configuration affecting Istio control plane installation version and shape.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// K8sIoApiCoreV1GitRepoVolumeSource : Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct K8sIoApiCoreV1GitRepoVolumeSource {
    /// Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name. +optional
    #[serde(rename = "directory", skip_serializing_if = "Option::is_none")]
    pub directory: Option<String>,
    /// Repository URL
    #[serde(rename = "repository", skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// Commit hash for the specified revision. +optional
    #[serde(rename = "revision", skip_serializing_if = "Option::is_none")]
    pub revision: Option<String>,
}

impl K8sIoApiCoreV1GitRepoVolumeSource {
    /// Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
    pub fn new() -> K8sIoApiCoreV1GitRepoVolumeSource {
        K8sIoApiCoreV1GitRepoVolumeSource {
            directory: None,
            repository: None,
            revision: None,
        }
    }
}