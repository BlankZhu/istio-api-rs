use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
/*
 * Configuration affecting Istio control plane installation version and shape.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// K8sIoApiCoreV1Volume : Volume represents a named volume in a pod that may be accessed by any container in the pod.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize, JsonSchema)]
pub struct K8sIoApiCoreV1Volume {
    /// Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "volumeSource", skip_serializing_if = "Option::is_none")]
    pub volume_source: Option<Box<super::K8sIoApiCoreV1VolumeSource>>,
}

impl K8sIoApiCoreV1Volume {
    /// Volume represents a named volume in a pod that may be accessed by any container in the pod.
    pub fn new() -> K8sIoApiCoreV1Volume {
        K8sIoApiCoreV1Volume {
            name: None,
            volume_source: None,
        }
    }
}